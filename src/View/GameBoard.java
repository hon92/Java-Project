package View;

import Controls.Key;
import Controls.Mouse;
import Data.GameData;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class GameBoard extends javax.swing.JPanel
{

    private BufferedImage map;
    private BufferedImage topPanel;
    private BufferedImage botPanel;
    private Key key;
    private Mouse mouse;
    private int currentWindowX;
    private int currentWindowY;
//    private List<Grass> grass;
//    private List<Relic> relic;
//    private List<Tree> trees;

    public GameBoard()
    {
        initComponents();
        initGameBoard();
    }

    private void initGameBoard()
    {
        map = new BufferedImage(GameData.MAP_WIDTH, GameData.MAP_HEIGHT, BufferedImage.BITMASK);
        try
        {
            topPanel = ImageIO.read(new File("src/Resources/topPanel.jpg"));
            botPanel = ImageIO.read(new File("src/Resources/botPanel.png"));
        }
        catch (IOException ex)
        {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        setFocusable(true);
        addMouseListener(new Mouse(this));
        addKeyListener(new Key(this));
        drawMap();

    }

    private void drawMap()
    {
        Graphics mapGraphic = map.getGraphics();
        for (int i = 0; i < GameData.MAP_WIDTH; i += 40)
        {
            for (int j = 0; j < GameData.MAP_HEIGHT; j += 40)
            {
                mapGraphic.setColor(Color.green);
                mapGraphic.fillRect(i, j, 40, 40);
                if (i == 120 && j == 120)
                {
                    mapGraphic.setColor(Color.blue);
                    mapGraphic.fillRect(i, j, 40, 40);
                }
            }
        }
    }

    public int convertX(int x)
    {
        return x - currentWindowX;
    }

    public int convertY(int y)
    {
        return y - currentWindowY;
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);

        g.drawImage(map, 0, 0, null);
        g.drawImage(topPanel, 0, 0, null);
        g.drawImage(botPanel, 0, GameData.WINDOW_HEIGHT - botPanel.getHeight(), null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
